<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>STUDY LEARN</title>
 <link href="/atom.xml" rel="self"/>
 <link href=""/>
 <updated>2013-09-16T12:17:47+08:00</updated>
 <id></id>
 <author>
   <name>STUDY LEARN</name>
   <email>xinllaang@sina.com</email>
 </author>

 
 <entry>
   <title>Zero to Hosted Jekyll Blog in 3 Minutes</title>
   <link href="/jekyll/2013/09/16/jekyllbootstrap-Zero-to-Hosted-Jekyll-Blog-in-3-Minutes.html"/>
   <updated>2013-09-16T00:00:00+08:00</updated>
   <id>/jekyll/2013/09/16/jekyllbootstrap-Zero-to-Hosted-Jekyll-Blog-in-3-Minutes</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;

&lt;H2&gt;1-reate a New Repository&lt;/H2&gt;


&lt;p&gt;Go to your https://github.com and create a new repository named USERNAME.github.io&lt;/p&gt;

&lt;H2&gt;2 - Install Jekyll-Bootstrap&lt;/H2&gt;


&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.io
$ cd USERNAME.github.io
$ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;H2&gt;3 - Profit(收益)&lt;/H2&gt;


&lt;p&gt;After GitHub has a couple minutes to do its magic your blog will be publicly available at http://USERNAME.github.io
&lt;br/&gt;
*Already have your blog on GitHub?&lt;/p&gt;

&lt;p&gt;I&#39;ll assume you have the Jekyll gem installed on your local machine. Run J￥ekyll-Bootstrap-Core locally to see what all the fuss is about:fuss&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/plusjade/jekyll-bootstrap.git
$ cd jekyll-bootstrap
$ jekyll --server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See it in action at http://localhost:4000.&lt;/p&gt;

&lt;p&gt;Next Steps
&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;Jekyll Quick Start&lt;/a&gt;&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>Jekyll Quick Start</title>
   <link href="/jekyll/2013/09/16/jekyllbootstrap-Jekyll-Quick-Start.html"/>
   <updated>2013-09-16T00:00:00+08:00</updated>
   <id>/jekyll/2013/09/16/jekyllbootstrap-Jekyll-Quick-Start</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;原文&lt;/a&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Quickly get your blog installed and published via GitHub Pages. Then run your blog locally and create your first post and page.&lt;/p&gt;

&lt;H2&gt;1. Install Jekyll-Bootstrap&lt;/H2&gt;


&lt;p&gt;Install Jekyll-Bootsrap if you haven’t already. Jekyll-bootstrap is a blogging framework with built-in support for theming, analytics, comments, and post/page creation.&lt;/p&gt;

&lt;H2&gt;2. Run Jekyll Locally&lt;/H2&gt;


&lt;p&gt;In order to preview your blog locally you’ll need to install the Jekyll ruby gem. Note gem dependencies will also be installed. You don’t have to run a local version but it helps if you want to preview your content before publishing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run into a problem please consult the original Jekyll installation documentation. You can also create a support issue using GitHub Issues.&lt;/p&gt;

&lt;p&gt;Once the gem is installed you can navigate to your Jekyll-Bootstrap directory. If you’ve followed the homepage instructions this will be: USERNAME.github.com. Once in the directory you’ll run jekyll with server support:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd USERNAME.github.com 
$ jekyll --server
# remember to change USERNAME to your GitHub username.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your blog is now available at: http://localhost:4000/.&lt;/p&gt;

&lt;H2&gt;3. Create a Post&lt;/H2&gt;


&lt;p&gt;Create posts easily via rake task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake post title=&quot;Hello World&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rake task automatically creates a file with properly formatted filename and YAML Front Matter. Make sure to specify your own title. By default, the date is the current date.
&lt;br/&gt;
The rake task will never overwrite existing posts unless you tell it to.&lt;/p&gt;

&lt;H2&gt;4. Create a Page&lt;/H2&gt;


&lt;p&gt;Create pages easily via rake task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;about.md&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a nested page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;pages/about.md&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a page with a “pretty” path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;pages/about&quot;
# this will create the file: ./pages/about/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rake task automatically creates a page file with properly formatted filename and YAML Front Matter as well as includes the Jekyll Bootstrap “setup” file.&lt;/p&gt;

&lt;H3&gt;Jekyll-Bootstrap Example Pages&lt;/H3&gt;


&lt;p&gt;Jekyll-bootstrap also provides many preconfigured page examples for reference. You can study the source and customize it for your own needs.&lt;/p&gt;

&lt;p&gt;&lt;BR/&gt;
Archive
&lt;BR/&gt;
Categories
&lt;BR/&gt;
Pages
&lt;BR/&gt;
Tags&lt;/p&gt;

&lt;H2&gt;5. Publish&lt;/H2&gt;


&lt;p&gt;&lt;BR/&gt;&lt;/p&gt;

&lt;p&gt;After you’ve added posts or made changes to your theme or other files, simply commit them to your git repo and push the commits up to GitHub.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;Add new content&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A GitHub post-commit hook will automatically deploy your changes to your hosted blog. You will receive a success or failure notice for every commit you make to your blog.&lt;/p&gt;

&lt;H2&gt;6. Customize&lt;/H2&gt;


&lt;p&gt;Jekyll-Bootstrap can be used as-is as a basic blogging platform. However there are plenty of ways to dig into deeper customization. The following outlines deeper Jekyll-Bootstrap customization techniques:&lt;/p&gt;

&lt;H3&gt;Themes&lt;/H3&gt;


&lt;p&gt;Jekyll-Bootstrap supports modular theming. Themes can co-exist and be enabled/disabled on demand. Editing, configuring, and creating themes is docummented in the Theming section.&lt;/p&gt;

&lt;H3&gt;Blog Configuration&lt;/H3&gt;


&lt;p&gt;Jekyll and Jekyll-Bootstrap has a simple but powerful Jekyll Configuration System. You can:&lt;/p&gt;

&lt;p&gt;&lt;LI&gt;Specify a custom permalink(永久链接) format for blog posts.&lt;/LI&gt;
&lt;LI&gt;Specify a commenting engine like disqus, intensedebate, livefyre, or custom.&lt;/LI&gt;
&lt;LI&gt;Specify an analytics engine like google, getclicky, or custom.&lt;/LI&gt;&lt;/p&gt;

&lt;H3&gt;Programming Interface&lt;/H3&gt;


&lt;p&gt;The API pages document main data-structures and code available for use in Jekyll and Jekyll-Bootstrap. Consult these pages for how and where to use the data and code provided.&lt;/p&gt;

&lt;H2&gt;Jekyll Introduction&lt;/H2&gt;


&lt;p&gt;&lt;span class=&quot;label notice&quot;&gt;highly recommend&lt;/span&gt; &lt;br/&gt;
I highly recommend reading the Jekyll Introduction if you plan to customize your blog. The introduction is meant for core understanding of how and why Jekyll works the way it does. This will provide you with the proper context, knowledge-base, and fundamentals necessary to understand and be efficient in working with Jekyll and Jekyll-Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-theming.html&quot;&gt;Next Step: Using Themes&lt;/a&gt;&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>jekyll newline</title>
   <link href="/2013/09/16/jekyll-newline.html"/>
   <updated>2013-09-16T00:00:00+08:00</updated>
   <id>/2013/09/16/jekyll-newline</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://mccxj.github.io/blog/20120629_problem-about-jekyll-and-markdown.html&quot;&gt;原文&lt;/a&gt;
在段落中硬换行&lt;br/&gt;
我原来以为不能硬换行，原来markdown也支持，只需要在需要换行的地方后面加至少两个空格就可以了。&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>UE（ultraEdit）设置不产生.bak文件(内含中英文版本)</title>
   <link href="/ultraedit/2013/09/15/ultraedit-not-backups.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/ultraedit/2013/09/15/ultraedit-not-backups</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/snowseabye/article/details/7239952&quot;&gt;原文&lt;/a&gt;
英文版按照如下顺序设置：
Menu: Advanced --&gt; Confiugration --&gt; File Handling --&gt; Backup --&gt; Select No Backup option&lt;/p&gt;

&lt;p&gt;中文版按照如下顺序设置：
高级--&gt; 配置 --&gt; 文件处理 --&gt; 备份，选择右侧的不备份即可&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>使用UltraEdit编辑jekyll文章</title>
   <link href="/jekyll/2013/09/15/ultraedit-edit-jekyll-post.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/jekyll/2013/09/15/ultraedit-edit-jekyll-post</id>
   <content type="html">
   	&lt;p&gt;在windows下保存文章的时候，需要保存为utf-8无BOM格式
&lt;img src=&quot;/mjj/assets/images/jekyll/ultraEdit_save_jekyll_post.jpg&quot;&gt;&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>jekyll server报cannot load such file -- posix_spawn_ext (LoadError)</title>
   <link href="/jekyll/2013/09/15/jekyll-server-cannot-load-such-file-posix-spawn-ext.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/jekyll/2013/09/15/jekyll-server-cannot-load-such-file-posix-spawn-ext</id>
   <content type="html">
   	&lt;p&gt;想要git clone &lt;a href=&quot;https://github.com/realjenius/realjenius.com&quot;&gt;realjenius&lt;/a&gt;的jekyll项目来研究研究，但是jekyll server的时候报如下的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost realjenius.com]$ jekyll server
Configuration file: /home/user/mycode/jekyll/realjenius.com/_config.yml
        Source: /home/user/mycode/jekyll/realjenius.com
   Destination: /home/user/jekyll/realjenius.com/_site
  Generating...   Liquid Exception: cannot load such file -- posix_spawn_ext in _posts/java/2009-09-10-brackets-in-java-annotation-parameters.md
/usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:53:in `require&#39;: cannot load such file -- posix_spawn_ext (LoadError)
from /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:53:in `require&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试一下是不是真的没有这个posix_spawn_ext文件，结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost realjenius.com]$ ruby -e &quot;require &#39;posix-spawn&#39;&quot;
/usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:53:in `require&#39;: cannot load such file -- posix_spawn_ext (LoadError)
from /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:53:in `require&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;果然是
&lt;br/&gt;
再查看一下是否真的没有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# gem uninstall posix-spawn
    You have requested to uninstall the gem:
    posix-spawn-0.3.6

    pygments.rb-0.5.2 depends on posix-spawn (~&amp;gt; 0.3.6)
    If you remove this gem, these dependencies will not be met.
    Continue with Uninstall? [yN]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有安装posix-spawn,算了，重新安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# gem install posix-spawn -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装成功之后，测试一下:
    [user@localhost test]$ ruby -e &quot;require &#39;posix-spawn&#39;&quot;
    [user@localhost test]$&lt;/p&gt;

&lt;p&gt;其他类似错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:53:in `require&#39;: cannot load such file -- yajl/yajl (LoadError)

[user@localhost test]# gem install yajl-ruby -V
&lt;/code&gt;&lt;/pre&gt;

   </content>
 </entry>
 
 <entry>
   <title>载入 jQuery 库的最佳方法</title>
   <link href="/jquery/2013/09/15/include-jquery-best-way.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/jquery/2013/09/15/include-jquery-best-way</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://lightcss.com/best-way-to-include-jquery/&quot;&gt;原文&lt;/a&gt;
在网站开发的项目中使用Google CDN的jQuery库虽然加载速度很快，但调用本地服务器的库才可以确保万无一失。&lt;/p&gt;

&lt;H1&gt;使用方法&lt;/H1&gt;


&lt;p&gt;使用下面的代码可以在Google CDN库获取失败时载入本地jQuery库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/js/libs/jquery.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在WordPress主题中使用的方法为：&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;script type=&quot;text/javascript&quot;&gt;window.jQuery || document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;?php echo get_template_directory_uri(); ?&gt;/jquery.min.js&quot;&gt;&amp;lt;\/script&gt;&#39;)&lt;/script&gt;
注意事项&lt;/p&gt;

&lt;p&gt;因为开头提到的原因，所以建议下载一份 jQuery 官方的 min 库 放到 WordPress 当前使用的主题目录下调用，不要使用 wp-includes 里面的库。
Google CDN 库的地址采用了协议相对路径，它可以很好的解决 https 引起的一些问题，具体可以看 Paul Irish 的介绍，当然你依旧可以使用带「http:」的路径。
许多网站都采用 Google CDN 提供的 jQuery 库，使用它可以得到出色的缓存效果。
把 jQuery 代码统统放到页面底部可以提高载入速度。
使用 HTML5 重构的页面可省略掉 type=&quot;text/javascript&quot;。
使用SAE开发者资源&lt;/p&gt;

&lt;p&gt;由于 Google 服务在国内缺乏稳定性，为了稳妥，使用 SAE 的开发者资源是个省流量又提高速度的好方法。SAE 为新浪为其应用提供的开发者资源，其中就有 jQuery 库。使用的话非常简单，只要到 SAE 开发者中心 找到合适的地址并替换掉上面代码的 Google CDN 地址即可。例如：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//lib.sinaapp.com/js/jquery/1.9.0/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;window.jQuery || document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/libs/jquery.min.js&quot;&gt;&amp;lt;\/script&gt;&#39;)&lt;/script&gt;
2011.05.25：由于目前 Google 的不稳定，而国内没有好的同类服务，故这已不是最优方案。当然，你把 Google 库路径换成国内稳定且快速的路径（如果存在），依然可以受用此方法带来的各种好处。
2011.06.23：根据 LOO2K 提醒，更新了 SAE 方案。&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>html中/，没有斜杆，//的区别</title>
   <link href="/html/2013/09/15/html-diagonal.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/html/2013/09/15/html-diagonal</id>
   <content type="html">
   	url 没有斜杆 当前网址+url&lt;br/&gt;
/url http://localhost:8080/123/223.html  http://localhost:8080/url&lt;br/&gt;
//url http://url&lt;br/&gt;
   </content>
 </entry>
 
 <entry>
   <title>github如何删除一个库</title>
   <link href="/git/2013/09/15/github-delete-repository.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/git/2013/09/15/github-delete-repository</id>
   <content type="html">
   	&lt;p&gt;一定要先进入一个库之后才有删除库的选项
&lt;img src=&quot;/mjj/assets/images/git/github/github_delete_repository.png&quot;/&gt;
&lt;img src=&quot;/mjj/assets/images/git/github/github_delete_repository_2.png&quot;/&gt;&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>在安装rdiscount的报错</title>
   <link href="/ruby/2013/09/15/gem-install-rdiscount-error.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/ruby/2013/09/15/gem-install-rdiscount-error</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;https://github.com/brianmario/mysql2/issues/371&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;H1&gt;results:&lt;/H1&gt;


&lt;H2&gt;The following warning/error:&lt;/H2&gt;


&lt;pre&gt;&lt;code&gt;Parsing documentation for rdiscount-2.0.7.2
unable to convert &quot;\xCF&quot; from ASCII-8BIT to UTF-8 for lib/rdiscount.bundle, skipping
&lt;/code&gt;&lt;/pre&gt;

&lt;H2&gt;Full output:&lt;/H2&gt;


&lt;pre&gt;&lt;code&gt;mes-MacBook-Pro:~ me$ gem install rdiscount
Fetching: rdiscount-2.0.7.2.gem (100%)
Building native extensions.  This could take a while...
Successfully installed rdiscount-2.0.7.2
Parsing documentation for rdiscount-2.0.7.2
unable to convert &quot;\xCF&quot; from ASCII-8BIT to UTF-8 for lib/rdiscount.bundle, skipping
Installing ri documentation for rdiscount-2.0.7.2
1 gem installed
mes-MacBook-Pro:~ me$
&lt;/code&gt;&lt;/pre&gt;

&lt;H1&gt;解决方法：&lt;/H1&gt;


&lt;p&gt;must install rdoc 4.0.1 or higher&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>gem install jekyll报instance of Date needs to have method marshal_load</title>
   <link href="/jekyll/2013/09/15/gem-install-jekyll-instance-of-Date-needs-to-have-method-marshal_load.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/jekyll/2013/09/15/gem-install-jekyll-instance-of-Date-needs-to-have-method-marshal_load</id>
   <content type="html">
   	&lt;pre&gt;&lt;code&gt;$ ruby -v
ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-linux]
$ gem -v
1.8.10


$ gem install jekyll
ERROR:  While executing gem ... (TypeError)
    instance of Date needs to have method `marshal_load&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决办法：
&lt;br/&gt;升级 Ruby 到 1.9.3+&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>US and UK spy agencies defeat privacy and security on the internet</title>
   <link href="/english/2013/09/15/english-US-and-UK-spy-agencies-defeat-privacy-and-security-on-the-internet.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/english/2013/09/15/english-US-and-UK-spy-agencies-defeat-privacy-and-security-on-the-internet</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://xue.youdao.com/biarticle.a?articleId=-825172592751556828&amp;amp;date=2013-09-14&amp;amp;position=read&amp;amp;channelType=personal&quot;&gt;文章来源&lt;/a&gt;&lt;BR/&gt;
US and UK spy agencies defeat privacy and security on the internet&lt;br/&gt;
美国和英国情报机构战胜网络隐私和安全&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;US and British intelligence agencies have successfully cracked much of the online encryption relied upon by hundreds of millions of people to protect the privacy of their personal data, online transactions and emails, according to top-secret documents revealed by former contractor Edward Snowden.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;根据前特工爱德华.斯诺登披露的顶级秘密文件，美国和英国情报机构成功破解网上的加密，破坏无数的人为保护个人数据、在线操作和电子邮件的密码，侵犯人们隐私。&lt;/p&gt;

&lt;p&gt;The files show that the National Security Agency and its UK counterpart
GCHQ have broadly compromised the guarantees that internet companies have given consumers to reassure them that their communications, online banking and medical records would be indecipherable to criminals or governments.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;文件披露国家安全机构和英国的同行GCHO连累了那些网络公司，这些公司向消费者保证他们的网上沟通、网上银行和医疗记录是安全的，这些记录是无法被罪犯和政府破解。
&lt;br/&gt;
The agencies, the documents reveal, have adopted a battery of(一连串的) methods in their systematic and ongoing assault on what they see as one of the biggest threats to their ability to access huge swathes of internet traffic – &quot;the use of ubiquitous encryption across the internet&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;文件披露了这些机构采用了一系列的方法不间断系统地攻击他们视为对他们访问大量网络数据的能力的最大威胁之一——网络上广泛使用的加密&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Those methods include covert measures to ensure NSA control over setting of international encryption standards, the use of supercomputers to break encryption with &quot;brute force&quot;, and – the most closely guarded secret of all – collaboration with technology companies and internet service providers themselves.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;这些方法包括确保NSA控制国际的加密标准这种隐密的措施，使用超级电脑用暴力破解密码-最严密监视的秘密是-与科技公司和网络服务商合作。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Through these covert partnerships, the agencies have inserted secret vulnerabilities – known as backdoors or trapdoors – into commercial encryption software.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;通过这些隐蔽的合作，机构能安插秘密漏洞-人们所知的“后门”或“地板门”-进入到商业加密软件中。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The files, from both the NSA and GCHQ, were obtained by the Guardian, and the details are being published today in partnership with(和…合作) the New York Times and ProPublica. They reveal:&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;NSA和GCHQ的文件被卫报获取，详情可以在今天出版的卫报和纽约时报和ProPublica刊登。内容包括：&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; A 10-year NSA program against encryption technologies made a breakthrough in 2010 which made &quot;vast amounts&quot; of data collected through internet cable taps newly &quot;exploitable&quot;.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;在2010年，10年NSA针对加密技术的项目取得突破，这使“大量”的数据通过新开发网络电缆窃听。&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; The NSA spends $250m a year on a program which, among other goals, works with technology companies to &quot;covertly influence&quot; their product designs.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; NSA花费每年2.5亿美元与科技公司合作，“秘密影响”产品设计。&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; The secrecy of their capabilities against encryption is closely guarded, with analysts warned: &quot;Do not ask about or speculate on sources or methods.&quot;&lt;li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; 针对加密功能的秘密被紧密监视，分析员警告：“不要问或推测资源或方法。”&lt;li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; The NSA describes strong decryption programs as the &quot;price of admission for the US to maintain unrestricted access to and use of cyberspace&quot;.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; NSA描述强大的解密程序为“美国管理不受控制的网络访问和使用所付出的代价”&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; A GCHQ team has been working to develop ways into encrypted traffic on the &quot;big four&quot; service providers, named as Hotmail, Google, Yahoo and Facebook.&lt;li/&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; GCHQ小组努力寻求方法以在四大服务商-Hotmial, Google, Yahoo和Facebook破密。&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;This network diagram, from a GCHQ pilot program(试点计划，试点工程), shows how the agency proposed a system to identify encrypted traffic from its internet cable-tapping programs and decrypt what it could in near-real time. Photograph: Guardian&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;这个网络表格是GCHQ的试点程序，显示机构是如何计划一个系统从网络电缆辨认加密流-几乎能边窃听程序边解密。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The agencies insist that the ability to defeat encryption is vital to their core missions of counter-terrorism and foreign intelligence gathering.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;机构坚持破解加密的能力对对付恐怖主义和外国情报收集是很重要的。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;But security experts accused them of attacking the internet itself and the privacy of all users. &quot;Cryptography forms the basis for trust online, &quot; said Bruce Schneier, an encryption specialist and fellow at Harvard&#39;s Berkman Center for Internet and Society. &quot;By deliberately undermining online security in a short-sighted effort to eavesdrop, the NSA is undermining the very fabric of the internet.&quot; Classified briefings between the agencies celebrate their success at &quot;defeating network security and privacy&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;但安全专家指控他们攻击互联网和用户的隐私。“密码学构成网络信任的基础。”哈佛大学布赫曼网络和社会中心的布鲁斯.斯肯里尔说。“通过故意短视地削弱网络安全来偷听，NSA在削弱互联网的组织。”分类的机构间的简报庆祝他们在“打败网络安全和隐私”上的成绩。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&quot;For the past decade, NSA has lead [sic] an aggressive, multi-pronged effort to break widely used internet encryption technologies, &quot; stated a 2010 GCHQ document. &quot;Vast amounts of encrypted internet data which have up till(到目前为止) now been discarded are now exploitable.&quot;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;“在上个十年，NSA已经 [sic]-一个侵略性的、多元化努力，以打破广泛使用的网络加密技术“2010GCHQ文件提到。”直到现在，大量的加密被遗弃的数据在开发。“&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;An internal agency memo noted that among British analysts shown a presentation on the NSA&#39;s progress: &quot;Those not already briefed were gobsmacked!&quot;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;一个内部情报机构的备忘录提到，英国分析家展现NSA的进步：“那些已经不简短的令人震惊。“&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The breakthrough, which was not described in detail in the documents, meant the intelligence agencies were able to monitor &quot;large amounts&quot; of data flowing through the world&#39;s fibre-optic cables and break its encryption, despite assurances from internet company executives that this data was beyond the reach(beyond the reach
力所不及；无法达到；超出…的能力之外) of government.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;在文件中没有详细提及的突破是情报机构能够监视“大量“的通过世界光导纤维电缆的数据和破解加密，虽然网络公司行政人员称政府不能接触到这些数据。”&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The key component of the NSA&#39;s battle against encryption, its collaboration with technology companies, is detailed in the US intelligence community&#39;s top-secret 2013 budget request under the heading &quot;Sigint [signals intelligence] enabling&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;2013年秘密预算案中详细叙述，NSA对付加密战的关键因素是其与科技公司的合作，以“Singint[信号情报]为标题。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Classified briefings between the NSA and GCHQ celebrate their success at &#39;defeating network security and privacy&#39;. Photograph: Guardian&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;NSA和GCHQ的分类简报庆祝他们在网络安全和隐私上取得的成绩。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Funding for the program – $254.9m for this year – dwarfs that of the Prism program, which operates at a cost of $20m a year, according to previous NSA documents. Since 2011, the total spending on Sigint enabling has topped $800m. The program &quot;actively engages US and foreign IT industries to covertly influence and/or overtly leverage their commercial products&#39; designs&quot;, the document states. None of the companies involved in such partnerships are named; these details are guarded by still higher levels of classification.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;根据前NSA文件称，今年在此程序中的费用是2.549亿美元，比起每年花费2千万的棱镜程序要多得多。自从2011年，Sigint的总费用是8亿美元。文件称这程序能积极参与美国和外国的IT工业，以秘密影响和/或公开地利用商业产品设计。文件没有列出参与的公司的名称，这些细节仍然是作为高级情报来监视。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Among other things, the program is designed to &quot;insert vulnerabilities into commercial encryption systems&quot;. These would be known to the NSA, but to no one else, including ordinary customers, who are tellingly referred to in the document as &quot;adversaries&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;在其他事中，这个程序作这样设计，以“在商业加密系统中安插漏洞。只有NSA知道，其他人不知道，包括普通消费者，他们在文章中称为”对手“。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&quot;These design changes make the systems in question exploitable through Sigint collection … with foreknowledge of the modification. To the consumer and other adversaries, however, the systems&#39; security remains intact.&quot;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;“这些设计通过Sigint收集并改变所提及的系统开发…预知的修改。对消费者和其他对手来说，这个系统的安全还仍是完整的。“&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The document sets out in clear terms the program&#39;s broad aims, including making commercial encryption software &quot;more tractable&quot; to NSA attacks by &quot;shaping&quot; the worldwide marketplace and continuing efforts to break into the encryption used by the next generation of 4G phones.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;这文件清淅的条文解释程序的广泛意义，包括使商业加密软件受到NSA攻击更易于处理，形成世界市场和继续努力破解下一代4G手机的用户的加密。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Among the specific accomplishments for 2013, the NSA expects the program to obtain access to &quot;data flowing through a hub for(for prep.属于…的；) a major communications provider&quot; and to a &quot;major internet peer-to-peer voice and text communications system&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;2013年的具体成绩是，NSA期待程序获取“数据为更多沟通供应商一中心流动，“重要的互联网同伴对同伴的声音和文字沟通系统。”&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Technology companies maintain that they work with the intelligence agencies only when legally compelled to do so. The Guardian has previously reported that Microsoft co-operated with the NSA to circumvent((巧妙地)避开，规避) encryption on the Outlook.com email and chat services. The company insisted that it was obliged to comply with &quot;existing or future lawful demands&quot; when designing its products.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;科技公司说他们之所以与情报机构合作是因为他们法律上被迫这样做。卫报以前报道过微软与NSA合作在Outlook.com电邮和聊天服务上破解加密。公司坚持当他们设计产品时，他们被迫遵循“现有或将来的合法要求”。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Independent security experts have long suspected that the NSA has been introducing weaknesses into security standards, a fact confirmed for the first time by another secret document. It shows the agency worked covertly to get its own version of a draft security standard issued by the US National Institute of Standards and Technology approved for worldwide use in 2006.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;独立安全专家长期怀疑NSA已经在安全标准上引入漏洞，这是首次被秘密文件确认的事实。其显示机构民秘密地工作，以获得自己版本的草稿安全标准，这标准是由美国国家标准和科技机构制定的，在2006年得到世界认可的。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&quot;Eventually, NSA became the sole editor, &quot; the document states.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;文件称：“最终，NSA变成唯一的编辑。“&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The NSA&#39;s codeword for its decryption program, Bullrun, is taken from a major battle of the American civil war. Its British counterpart, Edgehill, is named after the first major engagement of the English civil war, more than 200 years earlier.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;NSA的解密的代号是Bullrun,该代号是源于美国国内战争的一场主要战役。其英国同僚代号是Egehill,源于英格兰国内战争的首次重要交战，这战争是早在200多年前的。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A classification guide for NSA employees and contractors on Bullrun outlines in broad terms（in broad terms大体上） its goals.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;NSA的员工和订约人的分类指引是Bullrun概要比目标要广阔。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&quot;Project Bullrun deals with NSA&#39;s abilities to defeat the encryption used in specific network communication technologies. Bullrun involves multiple sources, all of which are extremely sensitive.&quot; The document reveals that the agency has capabilities against widely used online protocols, such as HTTPS, voice-over-IP and Secure Sockets Layer (SSL), used to protect online shopping and banking.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;“Bullrun项目处理NSA打败在具体网络沟通技术的加密。Bullrun包括多种来源，所有都是极期敏感的。“文件揭示情报机构有能力对付广泛应用在网络的协议，比如HTTPS，IP声音和加密套接字协议层（SSL），这些协议都用来保护网上购物和网上银行。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The document also shows that the NSA&#39;s Commercial Solutions Center, ostensibly the body through which technology companies can have their security products assessed and presented to prospective government buyers, has another, more clandestine role.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;文件也指出NSA商业解决中心，表面上是科技公司评估安全产品和向潜在政府买家显示的机构，有更秘密的作用。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;It is used by the NSA to &quot;to leverage sensitive, co-operative relationships with specific industry partners&quot; to insert vulnerabilities into security products. Operatives were warned that this information must be kept top secret &quot;at a minimum&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;这机构是用来为NSA利用敏感和合作的关系和具体工业合作方在安全产品上安插漏洞。操作者称这些信息必须至少保持高度秘密。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A more general NSA classification guide reveals more detail on the agency&#39;s deep partnerships with industry, and its ability to modify products. It cautions analysts that two facts must remain top secret: that NSA makes modifications to commercial encryption software and devices &quot;to make them exploitable&quot;, and that NSA &quot;obtains cryptographic details of commercial cryptographic information security systems through industry relationships&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;一个更普通的NSA分类指南揭示更多情报机构和工业的深远合作，和机构修改产品的能力。情报机构警告分析家两个事实必须保持顶级秘密：NSA修改商业加密软件和设备，以使软件更具开发性“，NSA通过工业关系获得商业用密码写的信息安全系统。“&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The agencies have not yet cracked all encryption technologies, however, the documents suggest. Snowden appeared to confirm this during a live Q&amp;amp;A with Guardian readers in June. &quot;Encryption works. Properly implemented strong crypto systems are one of the few things that you can rely on, &quot; he said before warning that NSA can frequently find ways around it as a result of(as a result ofadv. 因此，由于；作为…的结果) weak security on the computers at either end of the communication.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;情报机构还没有完全破解所有加密技术，但是文件提到，斯诺登6月参加现场直播的Q&amp;amp;A向卫报读者确定这点。“加密在进行。你可以依赖恰当的加密系统。“他说在警告前，NSA能够经常发现围绕加密系统的方法，结果在电脑交流时没有安全感。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The documents are scattered with warnings over the importance of maintaining absolute secrecy around decryption capabilities.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;文件散布警告-在破密能力方面维护完全秘密的重要性。
&lt;br/&gt;
NSA Bullrun 2
&lt;br/&gt;
一张幻灯片显示情报机构破密的能力受到密切监视。
&lt;br/&gt;
A slide showing that the secrecy of the agencies&#39; capabilities against encryption is closely guarded. Photograph: Guardian
&lt;br/&gt;
在切尔滕纳姆和格洛斯特郡，GCHQ大楼制定严格的指南，关于讨论如何破密的议题。分析家指出：“不要问或猜想支撑Bullrun的来源或方法。”根据一文件，这个信息被紧密监视，甚至进入时弹出警告程序：“不须要‘知道‘”
&lt;br/&gt;
Strict guidelines were laid down at the GCHQ complex in Cheltenham, Gloucestershire, on how to discuss projects relating to decryption. Analysts were instructed: &quot;Do not ask about or speculate on sources or methods underpinning Bullrun.&quot; This informaton was so closely guarded, according to one document, that even those with access to aspects of the program were warned: &quot;There will be no &#39;need to know&#39;.&quot;
&lt;br/&gt;
据估计，情报机构会会选择性地抽一些合同工告知这个信息，但这被斯诺登彻底了解了，在美国
&lt;br/&gt;
The agencies were supposed to be &quot;selective in which contractors are given exposure to this information&quot;, but it was ultimately seen by Snowden, one of 850, 000 people in the US with top-secret clearance. A 2009 GCHQ document spells out the significant potential consequences of any leaks, including &quot;damage to industry relationships&quot;.
&lt;br/&gt;
85万人中有一个掌握顶级秘密。一份2009年GCHQ的文件指出任意泄露信息的结果是潜在重要性，包括‘对工业关系的破坏‘。
&lt;br/&gt;
&quot;Loss of confidence in our ability to adhere to confidentiality agreements would lead to loss of access to proprietary information that can save time when developing new capability, &quot; intelligence workers were told. Somewhat less important to GCHQ was the public&#39;s trust which was marked as a moderate risk, the document stated.
&lt;br/&gt;
情报局人员被告知：“当我们发展新能力时，如果在我们能力范围内失去机密文件的信息，会导致失去特有的省时间的信息。文件提到，对GCHQ而言，大众的信任是评为中等危险。
&lt;br/&gt;
&quot;Some exploitable products are used by the general public; some exploitable weaknesses are well known eg possibility of recovering poorly chosen passwords, &quot; it said. &quot;Knowledge that GCHQ exploits these products and the scale of our capability would raise public awareness generating unwelcome publicity for us and our political masters.&quot;
&lt;br/&gt;
文件说：“公共在使用一些可利用的产品。一些可利用的弱点是众所周知的，比如使用保密性弱的密码。”“公众知道GCHQ利用这些产品和我们的能力，就会产生对我们和我们的领导不利的宣传。”
&lt;br/&gt;
The decryption effort is particularly important to GCHQ. Its strategic advantage from its Tempora program – direct taps on transatlantic fibre-optic cables of major telecommunications corporations – was in danger of eroding as more and more big internet companies encrypted their traffic, responding to customer demands for guaranteed privacy.
&lt;br/&gt;
对GCHQ而言，破密是特别重要的。其策略性的优点是Tempora程序-直接通过美国的电讯公司的光导纤维电缆窃听信息-这些公司陷于侵蚀的危险，因为越来越多网络公司破解消费者的信息，这样回应消费者保证隐私的要求。
&lt;br/&gt;
Without attention, the 2010 GCHQ document warned, the UK&#39;s &quot;Sigint utility will degrade as information flows changes, new applications are developed (and deployed) at pace and widespread encryption becomes more commonplace.&quot; Documents show that Edgehill&#39;s initial aim was to decode the encrypted traffic certified by three major (unnamed) internet companies and 30 types of Virtual Private Network (VPN) – used by businesses to provide secure remote access to their systems. By 2015, GCHQ hoped to have cracked the codes used by 15 major internet companies, and 300 VPNs.
&lt;br/&gt;
2010年GCHQ文件警告，正当信息流动改变，英国的“Sigint”会退化，新的应用会一步步发展并广泛传播，破密变得更普通的。文件指出埃德希尔的初衷是破解加密的被3个主要网络公司（没列出）和30个虚拟私人网络证实的文件-由商业使用，以对他们系统提供安全远程遥控。到2015年，GCHQ希望能破解由15个主要网络公司和300个VPN使用的密码。
&lt;br/&gt;
Another program, codenamed Cheesy Name, was aimed at singling（挑出，选出 (out)） out encryption keys, known as &#39;certificates&#39;, that might be vulnerable to being cracked by GCHQ supercomputers.
&lt;br/&gt;
另一个程序代码是Cheesy Name，目的是挑选出加密密码，大家所知的‘证书‘，这很脆弱，会被GCHQ超级电脑破解。&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Analysts on the Edgehill project were working on(work on致力于；作用于；继续工作) ways into the networks of major webmail providers as part of the decryption project. A quarterly update from 2012 notes the project&#39;s team &quot;continue to work on understanding&quot; the big four communication providers, named in the document as Hotmail, Google, Yahoo and Facebook, adding &quot;work has predominantly been focused this quarter on Google due to new access opportunities being developed&quot;.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;埃德希尔项目的分析家在寻找主要网页邮件供应商以成立破密项目。2012年的季度更新显示项目小组继续与四大通讯供应商协议，前文提到hotmail, Google, Yahoo和Facebook。并补充因为有新的发展机会，本季度主要集中在Google上工作。
&lt;br/&gt;
To help secure( 保护；弄到；招致；缚住) an insider advantage, GCHQ also established a Humint Operations Team (HOT). Humint, short for &quot;human intelligence&quot; refers to information gleaned directly from sources or undercover agents.
&lt;br/
为了帮助确保一个内部优势，GCHQ也在建立Humint操作小组（HOT）。Humint,是“人类情报”的简称，指的是直接由来源机构收集或秘密情报人员收集的信息。
&lt;br/&gt;
This GCHQ team was, according to an internal document, &quot;responsible for identifying, recruiting and running covert agents in the global telecommunications industry.&quot;
&lt;br/&gt;
根据一份内部文件，这个GCHQ小组负责辨认、招聘和管理世界通讯业的秘密情报人员。
&lt;br/&gt;
&quot;This enables GCHQ to tackle some of its most challenging targets, &quot; the report said. The efforts made by the NSA and GCHQ against encryption technologies may have negative consequences for all internet users, experts warn.
&lt;br/&gt;
报道称，“这会使GCHQ处理一些挑战性的目标。”专家警告，NSA和GCHQ反对破解技术的工作可能导致对所有互联网使用者的负责结果。
&lt;br/&gt;
&quot;Backdoors are fundamentally in conflict with good security, &quot; said Christopher Soghoian, principal technologist and senior policy analyst at the American Civil Liberties Union. &quot;Backdoors expose all users of a backdoored system, not just intelligence agency targets, to heightened risk of data compromise.&quot; This is because the insertion of backdoors in a software product, particularly those that can be used to obtain unencrypted user communications or data, significantly increases the difficulty of designing a secure product.&quot;
&lt;br/&gt;
美国国内自由联盟主要技术人员和高级警务分析家克里斯多夫.苏豪伊恩说：“后门彻底与安保发生冲突。后门为所有用户提供后门系统，不只是情报机构目标，提升数据的危险。”这是因为在软件产品安插后门软件，特别那些可以获取未加密用户的沟通记录或数据，大大提高了设计一款安全产品的难度。“
&lt;br/&gt;
This was a view echoed in a recent paper by Stephanie Pell, a former prosecutor at the US Department of Justice and non-resident fellow at the Center for Internet and Security at Stanford Law School.
&lt;br/&gt;
这是在最近一份由斯蒂芬妮.佩尔写的报告上得到回应，斯蒂芬妮是美国司法部的前检察官及斯坦福法学院网络与安全中心的工作人员。
&lt;br/&gt;
&quot;[An] encrypted communications system with a lawful interception back door is far more likely to result in the catastrophic loss of communications confidentiality than a system that never has access to the unencrypted communications of its users, &quot; she states.
&lt;br/&gt;
她提到，“一个加密沟通系统有合法的拦截后台软件，与不能接触不加密用户沟通的系统相比，这很可能导致沟通机密的灾难性损失。”&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>Centos 6.4 64位系统安装截图软件shutter</title>
   <link href="/centos/2013/09/15/Install-shuttter-centos-64bit.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/centos/2013/09/15/Install-shuttter-centos-64bit</id>
   <content type="html">
   	&lt;pre&gt;&lt;code&gt;[root@localhost yum.repos.d]# rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-1.el6.nux.noarch.rpm
Retrieving http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-1.el6.nux.noarch.rpm
Preparing...                ########################################### [100%]
package nux-dextop-release-0-1.el6.nux.noarch is already installed
[root@localhost yum.repos.d]# yum install shutter
&lt;/code&gt;&lt;/pre&gt;

   </content>
 </entry>
 
 <entry>
   <title>Google Chrome 29 Released – Install on RHEL/CentOS 6 and Fedora 19/15</title>
   <link href="/linux/2013/09/15/Install-Google-Chrome-in-Linux.html"/>
   <updated>2013-09-15T00:00:00+08:00</updated>
   <id>/linux/2013/09/15/Install-Google-Chrome-in-Linux</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://www.tecmint.com/install-google-chrome-on-redhat-centos-fedora-linux/&quot;&gt;原文&lt;/a&gt;
Google Chrome is a freeware web browser developed by Google Inc.
Google Chrome team finally announced the release of Google Chrome 29,
the actual version is 29.0.1547.57 for Linux, Mac and Windows operating systems.
This new version bundled with some exciting features like a new API for high quality video and
audio communication with minor security and bug fixes.
If you would like to know more other cool features of this release,
please visit at &lt;a href=&quot;https://www.google.com/chrome/intl/en/more/features.html&quot;&gt;Google’s Chrome Features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install Google Chrome in Linux
Install Google Chrome in Linux&lt;/p&gt;

&lt;p&gt;In our earlier articles we have shown you how to install latest released Opera Browser 12.00 and Firefox 21 versions. In this tutorial we will show you how we have practically installed Google Chrome 29 browser in one of our CentOS 6.4 server using Google’s own repository with Yum tool. By using repository you will keep your Chrome browser up-to-date. However, it should also work on RHEL 6.4/6.3/6.2/6.1/6.0, CentOS 6.4/6.3/6.2/6.1/6.0 and Fedora 19,18,17,16,15 versions as well.
Step 1: Enable Google YUM repository
Create a file called /etc/yum.repos.d/google-chrome.repo and add the following lines of code to it.
[google-chrome]
name=google-chrome
baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
Step 2: Installing Chrome Web Browser
Download and Install Chrome Web Browser with yum command. It will automatically install all dependencies.&lt;/p&gt;

&lt;h1&gt;yum install google-chrome-stable&lt;/h1&gt;

&lt;p&gt;Update : Sadly, the Google Chrome browser no longer supports the most famous commercial distribution Red Hat and its free clones such as CentOS and Scientific Linux.
Yes, they’ve discontinued support for RHEL 6.X version as of Google Chrome and on other side, latest Firefox and Opera browsers run successfully on the same platforms.
Luckily, there is a script developed by Richard Lloyd, that automatically download and install latest Google Chrome browser by picking libraries from a more recent released distro and put those libraries in (/opt/google/chrome/lib) directory and then you can able to run Google Chrome on CentOS 6.X version.&lt;/p&gt;

&lt;h1&gt;wget http://chrome.richardlloyd.org.uk/install_chrome.sh&lt;/h1&gt;

&lt;h1&gt;chmod u+x install_chrome.sh&lt;/h1&gt;

&lt;h1&gt;./install_chrome.sh&lt;/h1&gt;

&lt;p&gt;Sample Output
Google Chrome Installer 2.00 on the i686 platform
(C) Richard K. Lloyd 2013 &lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#114;&amp;#107;&amp;#108;&amp;#x6c;&amp;#111;&amp;#x79;&amp;#x64;&amp;#x40;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#114;&amp;#x6b;&amp;#x6c;&amp;#108;&amp;#111;&amp;#x79;&amp;#x64;&amp;#x40;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*** Checking for an update to install_chrome.sh ...&lt;/p&gt;

&lt;p&gt;--2013-07-18 17:27:02--  http://chrome.richardlloyd.org.uk/version.dat
Resolving chrome.richardlloyd.org.uk... 193.110.246.53
Connecting to chrome.richardlloyd.org.uk|193.110.246.53|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5 [text/plain]
Saving to: aversion.data&lt;/p&gt;

&lt;p&gt;100%[===================================================================================================================&gt;] 5           --.-K/s   in 0s&lt;/p&gt;

&lt;p&gt;2013-07-18 17:27:02 (264 KB/s) - aversion.data&lt;/p&gt;

&lt;p&gt;*** install_chrome.sh is already the latest version (2.00) - continuing ...&lt;/p&gt;

&lt;p&gt;*** Determining latest Google Chrome version number ...
Step 3: Starting Chrome Web Browser
Starting browser with root user.&lt;/p&gt;

&lt;h1&gt;google-chrome &amp;amp;&lt;/h1&gt;

&lt;p&gt;Google Chrome Startup Screen
Google Chrome Startup Screen
Welcome screen of Chrome web browser.
Google Chrome Welcome Screen
Google Chrome Welcome Screen
Exploring www.tecmint.com with cool Chrome web browser.
Exploring www.tecmint.com in Google Chrome
Exploring www.tecmint.com in Google Chrome
That’s it, enjoy browsing with Chrome and do let me know your browsing experience with Chrome via comments.
Bio
Latest Posts&lt;/p&gt;

&lt;p&gt;My Twitter profileMy Facebook profileMy Google+ profile
Narad Shrestha
He has over 10 years of rich IT experience which includes various Linux Distros, FOSS and Networking. Narad always believes sharing IT knowledge with others and adopts new technology with ease.&lt;/p&gt;

&lt;p&gt;Linux Services &amp;amp; Free WordPress Setup&lt;/p&gt;

&lt;p&gt;Our post is simply ‘DIY’ aka ‘Do It Yourself, still you may find difficulties and want us to help you out. We offer wide range of Linux and Web Hosting Solutions at fair minimum rates. Please submit your orders by Clicking Here.
Tweet&lt;/p&gt;

&lt;p&gt;4
inShare
61
comments
Database Management Free work from home At home work
Distribution strategy in marketing Advertising Running Shoes
? PREVIOUS POST
A Command Line Web Browsing with Lynx and Links Tools
NEXT POST ?
Install Firefox 23 in RHEL/CentOS 6.4 &amp;amp; Fedora 19/18/17
Related Post(s):
Firefox 17 Released, Adds New Facebook Messenger – Install in Ubuntu 12.04/12.10, Xubuntu 12.10 and Linux Mint 14/13
Install Opera 12.11 (Browser) in RHEL/CentOS 6.3 and Fedora 17/16/15
Install Firefox 14 in RHEL – CentOS – Fedora
Install Firefox 23 in RHEL/CentOS 6.4 &amp;amp; Fedora 19/18/17
A Command Line Web Browsing with Lynx and Links Tools&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>msysgit bash的操作，比如复制拷贝</title>
   <link href="/git/2013/09/14/msysgit-operate.html"/>
   <updated>2013-09-14T00:00:00+08:00</updated>
   <id>/git/2013/09/14/msysgit-operate</id>
   <content type="html">
   	&lt;h1&gt;通过通过控制台的menu菜单&lt;/h1&gt;


&lt;p&gt;&lt;img src=&quot;/mjj/assets/images/git/msysgit/1.jpg&quot;&gt;
&lt;br/&gt;可以选择标记，用鼠标选中要复制的代码，右键&lt;/p&gt;

&lt;h1&gt;通过快捷键&lt;/h1&gt;


&lt;p&gt;要插入内容到bash，可以按insert&lt;br/&gt;
ctr+u是清空光标之前已经输入的内容&lt;br/&gt;
ctr+k是清空光标之后已经输入的内容&lt;br/&gt;
Esc是清空已经输入的全部内容&lt;br/&gt;&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>INSTALLING RUBY, RUBYGEMS, RAILS, AND MONGREL ON MAC OS X 10.5 (LEOPARD)</title>
   <link href="/ruby/2013/09/14/INSTALLING-RUBY-RUBYGEMS-RAILS-AND-MONGREL-ON-MAC-OS-X-10.5-%28LEOPARD%29.html"/>
   <updated>2013-09-14T00:00:00+08:00</updated>
   <id>/ruby/2013/09/14/INSTALLING-RUBY-RUBYGEMS-RAILS-AND-MONGREL-ON-MAC-OS-X-10.5-(LEOPARD)</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://hivelogic.com/articles/ruby-rails-leopard&quot;&gt;这篇文章的来源&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;These are instructions for compiling and installing Ruby, Rubygems, Ruby on Rails, and Mongrel on Mac OS X 10.5 (Leopard).&lt;/p&gt;

&lt;p&gt;If you already know why I write these tutorials, if you already have /usr/local in your path, if you’ve installed XCode installed
already … in other words, if you’re an old-school Hivelogic reader, &lt;a href=&quot;http://hivelogic.com/articles/ruby-rails-leopard#ruby&quot;&gt;just click here to jump right to the instructions&lt;/a&gt;.&lt;/p&gt;

&lt;H1&gt;THE FAQ (SORT OF)&lt;/H1&gt;


&lt;p&gt;Below I’ll walk you through getting your system ready for building and compiling open source software. But before I do, please allow
me to answer of few of the questions I invariably(adv. 总是；不变地；一定地) get asked every time I release this type of do-it-yourself
tutorials:&lt;/p&gt;

&lt;H2&gt;Why would I want to compile this stuff when it ships as part of Leopard?&lt;/H2&gt;


&lt;p&gt;Good question! Leopard ships with Ruby 1.8.6 and Rails 1.2.3 – both respectably(adv. 相当好地；体面地；可敬地) recent and stable versions.
And it’s easy enough to update to the latest version of Rails with a single command (sudo gem install rails if you’re curious).&lt;/p&gt;

&lt;p&gt;Then why roll your own? I expand on(详述) the benefits of building your own open source utilities (like Ruby and Rails) and why where they live
is important in my article entitled(题为) &lt;a href=&quot;http://hivelogic.com/articles/using_usr_local/&quot;&gt;Using /usr/local&lt;/a&gt;, but here are a few of the
reasons:&lt;/p&gt;

&lt;p&gt;&lt;li&gt;You want to run the latest/greatest versions of available software and don’t want to wait (or hope) for Apple to release an update.&lt;/li&gt;
&lt;li&gt;Your want to update, tweak([俚语]【计算机】对…稍作调整，对程序微调), and customize your own tools while keeping your system “stock” from Apple’s standpoint.&lt;li&gt;
&lt;li&gt;Apple may decide to modify these utilities during a system update, and doing so may break your stuff.&lt;/li&gt;
&lt;li&gt;You can move or remove the /usr/local filesystem, or even transfer it to another machine in one step.&lt;/li&gt;
&lt;li&gt;You’re used to, interested in, or curious about in the compile and build process.&lt;/li&gt;
For some people, these reasons are enough to take a few minutes to build your own software.&lt;/p&gt;

&lt;h1&gt;Why wouldn’t I just use MacPorts or Fink?(MacPorts和Fink是两个开源项目)&lt;/H1&gt;


&lt;p&gt;Both MacPorts and Fink are great projects, and I wholeheartedly support their efforts. I’m also a longtime FreeBSD geek, and the FreeBSD ports
tree is something I’ve relied upon(依靠) for ages. So I really get what MacPorts and Fink are about.&lt;/p&gt;

&lt;p&gt;On the other hand, I’m a geek at heart, I don’t mind compiling my own software, and I like the ability to build just what I need, right when I need it, without installing or waiting for any additional or externally-maintained software. If this method sounds like a headache to you, I know where you’re coming from. MacPorts and Fink provide most excellent alternatives. Tell them I sent you.&lt;/p&gt;

&lt;H2&gt;I used your instructions and I got the following error …&lt;/H2&gt;


&lt;p&gt;Please don’t email me about it but instead, post your question in the comments. I try and read and respond as often as I can. When I can’t, other Hivelogic readers often step in and try to help (they’re a great bunch), and usually we can figure it out together.&lt;/p&gt;

&lt;H1&gt;PREREQUISITES&lt;/H1&gt;


&lt;p&gt;You will need:&lt;/p&gt;

&lt;p&gt;&lt;LI&gt;Mac OS X 10.5 (Leopard)&lt;/LI&gt;
&lt;LI&gt;Xcode 3.0 or newer&lt;/LI&gt;
&lt;LI&gt;Familiarity with (or willingness to use) the Mac OS X Terminal application&lt;/LI&gt;
Note: You will probably need to install Xcode from the Mac OS X install DVD/CD (in the Optional Installs → Xcode folder). You can also download
it from &lt;a href=&quot;https://developer.apple.com/&quot;&gt;Apple’s Developer Connection&lt;/a&gt; free of charge.&lt;/p&gt;

&lt;p&gt;Another Note: These instructions are written for people using the default Mac OS X shell, bash. If you haven’t manually(adv. 手动地；用手) changed your shell
from bash, and you didn’t upgrade to Leopard from something older than Tiger, then you don’t have anything to worry about. If you’ve taken
specific steps to change the default shell to something other than bash (like tcsh), then you’ll need to figure out equivalent syntax to
use when setting paths and environment variables, or just switch back to bash, because we just roll with bash here. Sorry.&lt;/p&gt;

&lt;H1&gt;JUST IN CASE&lt;/H1&gt;


&lt;p&gt;While it’s unlikely that any of these steps might damage your system somehow, it’s probably a good idea to have a current backup of
everything, just in case(以防万一) (I recommend SuperDuper! for this by the way(顺便说说，顺便问一下), awesome product). So you’re following
these instructions at your own risk, and I’m not liable(adj. 有责任的) for anything that happens.&lt;/p&gt;

&lt;H1&gt;A NOTE ABOUT SUDO&lt;/H1&gt;


&lt;p&gt;With great power comes great responsibility, so Mac OS X may prompt you for your password prior to(在……之前；居先) executing some of the commands
you’ll be typing. It may do this only once, or several times throughout this process. Just re-enter your password as needed.&lt;/p&gt;

&lt;H1&gt;USING TERMINAL&lt;/H1&gt;


&lt;p&gt;You’ll need to launch the Terminal application. It can be found in the /Applications/Utilities folder.&lt;/p&gt;

&lt;p&gt;Each of the lines below appearing in monospaced type(等宽字体) should be entered into Terminal, and be followed by the Return key.&lt;/p&gt;

&lt;H1&gt;PATHS&lt;/H1&gt;


&lt;H2&gt;Don’t skip this step!&lt;/H2&gt;


&lt;p&gt;Mac OS X, like other UNIX systems, uses something called a path to determine where it should look for applications on the command
line (that is, when you’re using the Terminal app). The path is actually an environment variable, set by a special file that’s automatically
 executed when you open a new Terminal window.&lt;/p&gt;

&lt;p&gt;We need to make sure that our path is set to look for files in /usr/local (the place where we’ll be installing the tools) before looking
anywhere else. This is important.&lt;/p&gt;

&lt;p&gt;To see if the path has been set properly, we can check the contents of the .profile file (the special file hidden in our home folder) for
a PATH line using a text editor. TextMate, TextWrangler, BBEdit, and vi are all perfectly good options. To open the file with TextMate,
for example, we can type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; mate ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open the file if it already exists, or open a blank file if it doesn’t. Add the following line at the very end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; export PATH=&quot;/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:$PATH&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now save and close the file.&lt;/p&gt;

&lt;p&gt;It doesn’t matter how many other lines there are in the file, or what they say or do. Just make sure that this line comes last and you
should be fine.&lt;/p&gt;

&lt;p&gt;To make sure the changes are picked up correctly, we now need to execute the file with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s likely there will be no response from the shell here, just the prompt, but that’s OK, the changes have been picked up and we’re ready
to move on.&lt;/p&gt;

&lt;p&gt;You can also close your Terminal and open a new one instead if you’d like.&lt;/p&gt;

&lt;p&gt;Note: You may have noticed that I’ve added MySQL to the path in the line above. That’s because most users will be installing MySQL later
in this tutorial. If you’re the type to want to use something like SQLite or PostGreSQL as your database instead of MySQL, you can feel
free to omit the /usr/local/mysql/bin: bit from the line above, and replace it with the path to the database of your choice. If this note
doesn’t make sense to you, even if you don’t plan to install MySQL later, just keep on going … the extra bit in the path statement won’t
affect you at all.&lt;/p&gt;

&lt;H1&gt;SETTING UP&lt;/H1&gt;


&lt;p&gt;I like to create a folder to contain all of the downloaded files and their respective build folders. I tend to keep this folder around
indefinitely. Source code doesn’t take up much space, and it’s useful to refer back to later to remind yourself of previous installation
details or techniques, installed versions, for a fast install at a later time, or in case you want to uninstall something.&lt;/p&gt;

&lt;p&gt;For these examples, we’ll create a folder called src in the /usr/local section of the filesystem, and change directories into that folder.
It will be our workspace for everything we do here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /usr/local/src
sudo chgrp admin /usr/local/src
sudo chmod -R 775 /usr/local/src
cd /usr/local/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll download and compile everything in this new folder.&lt;/p&gt;

&lt;H1&gt;RUBY&lt;/H1&gt;


&lt;p&gt;Ok, let’s get started. Unlike previous versions of Mac OS X, Leopard has everything you’ll need to compile Ruby. You don’t need to install
any prerequisites. Take these commands and type or paste them into Terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p72.tar.gz
tar xzvf ruby-1.8.7-p72.tar.gz
cd ruby-1.8.7-p72
./configure --enable-shared --enable-pthread CFLAGS=-D_XOPEN_SOURCE=1
make
sudo make install
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我安装的是最新的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p247.tar.gz
tar xzvf ruby-2.0.0-p247.tar.gz
cd ruby-2.0.0-p247
./configure --enable-shared --enable-pthread CFLAGS=-D_XOPEN_SOURCE=1
make
sudo make install(这里需要输入密码，不知道为什么是我自己的密码,而不是超级管理员的密码)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that Ruby is installed and in your path, just type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;which ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者是这样：
    USERtekiiMac-3:src user$ which ruby
    /usr/local/bin/ruby
    USERtekiiMac-3:src user$ ruby --version
    ruby 1.8.7 (2012-02-08 patchlevel 358) &lt;a href=&quot;%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E7%9A%84%E7%89%88%E6%9C%AC&quot;&gt;universal-darwin12.0&lt;/a&gt;
    USERtekiiMac-3:src user$ /usr/local/bin/ruby --version
    ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.1.0]
You should see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/bin/ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don’t, you haven’t set your path correctly.&lt;/p&gt;

&lt;h1&gt;RUBYGEMS&lt;/H1&gt;


&lt;p&gt;With Ruby installed, we can move on to RubyGems. Same routine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O http://rubyforge.iasi.roedu.net/files/rubygems/rubygems-1.3.1.tgz
tar xzvf rubygems-1.3.1.tgz
cd rubygems-1.3.1
sudo /usr/local/bin/ruby setup.rb
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我自己的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O  http://rubyforge.org/frs/download.php/76729/rubygems-1.8.25.tgz（下载不了，只好用浏览器下载之后拷贝过来）
tar xzvf rubygems-1.8.25.tgz
cd rubygems-1.8.25
sudo /usr/local/bin/ruby setup.rb
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;H1&gt;RUBY ON RAILS&lt;/H1&gt;


&lt;p&gt;At last, we’re ready to install Rails. RubyGems will handle this for us:
    su root(输入密码)
    gem install rails
Mongrel and Capistrano get installed the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install mongrel
sudo gem install capistrano
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a handful(n. 少数；一把；棘手事) of other gems you’ll undoubtedly want, and you can install them one at a time, or all on one line
(if you have a list) like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install RedCloth termios rspec sake
&lt;/code&gt;&lt;/pre&gt;

&lt;H1&gt;THE MYSQL GEM&lt;/H1&gt;


&lt;p&gt;As of(自……起) Rails 2.0, the default database system is is now SQLite, which also ships with Leopard.&lt;/p&gt;

&lt;p&gt;Many of us still run MySQL locally though, and want to install the MySQL gem for better Rails integration. If you followed my MySQL for
Mac OS X installation instructions or used one of the official MySQL distributions, your MySQL lives in /usr/local/mysql. You can install
the gem using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install mysql -- --with-mysql-dir=/usr/local/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;H1&gt;WE’RE DONE&lt;/H1&gt;


&lt;p&gt;Congratulations, you now have a custom-built, properly installed Ruby on Rails system! You might also like to build your own Subversion
client or run your own MySQL server too.&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>git revert (reset) a single file</title>
   <link href="/git/2013/09/13/git-revert-a-single-file.html"/>
   <updated>2013-09-13T00:00:00+08:00</updated>
   <id>/git/2013/09/13/git-revert-a-single-file</id>
   <content type="html">
   	&lt;p&gt;&lt;a href=&quot;http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is hard to find out there so here it is. If you have an uncommitted change (its only in your working copy) that you wish to revert (in SVN terms) to the copy in your latest commit, do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will checkout the file from HEAD, overwriting your change. This command is also used to checkout branches, and you could happen to have a file with the same name as a branch. All is not lost, you will simply need to type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -- filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also do this with files from other branches, and such. man git-checkout has the details.&lt;/p&gt;

&lt;p&gt;The rest of the Internet will tell you to use git reset --hard, but this resets all uncommitted changes you’ve made in your working copy. Type this with care(小心点).&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>git push时候出现HTTP request failed</title>
   <link href="/git/2013/09/13/git-http-request-failed.html"/>
   <updated>2013-09-13T00:00:00+08:00</updated>
   <id>/git/2013/09/13/git-http-request-failed</id>
   <content type="html">
   	&lt;h1&gt;问题如下：&lt;/h1&gt;


&lt;p&gt;git的版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost test]$ git --version
git version 1.7.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Centos6.4 64位系统下，当我使用git push的时候会出现如下的问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost test]$ git push
    error: The requested URL returned error: 403 Forbidden while accessing https://github.com/username/repositoryname.git/info/refs
fatal: HTTP request failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   [user@localhost test]$ git remote -v
   origin   https://github.com/username/repositoryname.git (fetch)
   origin   https://github.com/username/repositoryname.git (push)&lt;/p&gt;

&lt;h1&gt;解决方法：&lt;/h1&gt;


&lt;pre&gt;&lt;code&gt;[user@localhost test]$ git remote set-url origin https://username@github.com/username/repositoryname.git
[user@localhost test]$ git push
Counting objects: 10, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 685 bytes, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://username@github.com/username/repositoryname.git
9e89c81..2a28518  gh-pages -&amp;gt; gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;另外也可以设置称ssh提交方式，这样在命令行就不用每次都输入讨厌的密码&lt;/p&gt;

   </content>
 </entry>
 
 <entry>
   <title>git push采用SSH方式</title>
   <link href="/git/2013/09/13/git-generate-ssh-key.html"/>
   <updated>2013-09-13T00:00:00+08:00</updated>
   <id>/git/2013/09/13/git-generate-ssh-key</id>
   <content type="html">
   	&lt;H1&gt;问题的来源&lt;/H1&gt;


&lt;p&gt;想要使用SSH的方法，不想每次提交的时候都要输入密码，这样让我烦死了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost test]$ git remote set-url origin ssh://git@github.com/username/repository.git
[user@localhost test]$ git push
The authenticity of host &#39;github.com (192.30.252.130)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;github.com,192.30.252.130&#39; (RSA) to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
[user@localhost test]$ ssh -vT git@github.com
OpenSSH_5.3p1, OpenSSL 1.0.0-fips 29 Mar 2010
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /home/user/.ssh/identity type -1
debug1: identity file /home/user/.ssh/id_rsa type -1
debug1: identity file /home/user/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1+github5
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1+github5 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&amp;gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&amp;gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&amp;lt;1024&amp;lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host &#39;github.com&#39; is known and matches the RSA host key.
debug1: Found key in /home/user/.ssh/known_hosts:1
Warning: Permanently added the RSA host key for IP address &#39;192.30.252.129&#39; to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /home/user/.ssh/identity
debug1: Trying private key: /home/user/.ssh/id_rsa
debug1: Trying private key: /home/user/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是解决办法：
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;Generating SSH Keys&lt;/a&gt;&lt;BR/&gt;
If you have decided not to use the recommended(推荐的) HTTPS method, we can use SSH keys to establish a secure connection between your computer and GitHub. The steps below will walk you through generating an SSH key and then adding the public key to your GitHub account.&lt;/p&gt;

&lt;h1&gt;Step 1: Check for SSH keys&lt;/h1&gt;


&lt;p&gt;First, we need to check for existing ssh keys on your computer. Open up Terminal and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.ssh
ls
# Lists the files in your .ssh directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我实际的运行效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost test]$ cd ~/.ssh
[user@localhost .ssh]$ ls
known_hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the directory listing to see if you have a file named either id_rsa.pub or id_dsa.pub. If you don&#39;t have either of those files go to step 2. Otherwise, you already have an existing keypair, and you can skip to step 3.
&lt;br/&gt;我目前没有id_rsa.pub和id_dsa.pub文件&lt;/p&gt;

&lt;H1&gt;Step 2: Generate a new SSH key&lt;/H1&gt;


&lt;p&gt;To generate a new SSH key, enter the code below. We want the default settings so when asked to enter a file in which to save the key, just press enter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;
# Creates a new ssh key, using the provided email as a label
Generating public/private rsa key pair.
Enter file in which to save the key (/home/you/.ssh/id_rsa):
$ssh-add id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you need to enter a passphrase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should give you something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your identification has been saved in /home/you/.ssh/id_rsa.
Your public key has been saved in /home/you/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我运行的实际效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost .ssh]$ ssh-keygen -t rsa -C &quot;xinllaang@sina.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|  +              |
|     .  .        |
|  . .    o       |
|          +      |
|          .      |
|      .          |
|       o  .      |
|                 |
|       o+        |
+-----------------+
[user@localhost .ssh]$ ls
id_rsa  id_rsa.pub  known_hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Step 3: Add your SSH key to GitHub&lt;/h1&gt;


&lt;p&gt;Run the following code to copy the key to your clipboard.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install xclip
# Downloads and installs xclip. If you don&#39;t have `apt-get`, you might need to use another installer (like `yum`)

$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost .ssh]$ sudo yum install xclip
[sudo] password for user: 
Sorry, try again.
[sudo] password for user: 
user is not in the sudoers file.  This incident will be reported.

[user@localhost .ssh]$ su root
Password: 

[root@localhost .ssh]# yum install xclip
Loaded plugins: fastestmirror, priorities, refresh-packagekit, security
Loading mirror speeds from cached hostfile
  * epel: mirrors.hustunique.com
  * nux-dextop: mirror.li.nux.ro
  Setting up Install Process
  Resolving Dependencies
  --&amp;gt; Running transaction check
  ---&amp;gt; Package xclip.x86_64 0:0.12-1.el6 will be installed
  --&amp;gt; Finished Dependency Resolution

  Dependencies Resolved

  ================================================================================
   Package          Arch              Version               Repository       Size
   ================================================================================
   Installing:
    xclip            x86_64            0.12-1.el6            epel             25 k

 Transaction Summary
 ================================================================================
 Install       1 Package(s)

 Total download size: 25 k
 Installed size: 43 k
 Is this ok [y/N]: y
 Downloading Packages:
 xclip-0.12-1.el6.x86_64.rpm                              |  25 kB     00:00     
 Running rpm_check_debug
 Running Transaction Test
 Transaction Test Succeeded
 Running Transaction
      Installing : xclip-0.12-1.el6.x86_64                                      1/1 
      Verifying  : xclip-0.12-1.el6.x86_64                                      1/1 

     Installed:
          xclip.x86_64 0:0.12-1.el6                                                     

      Complete!

[root@localhost .ssh]# su user
[user@localhost .ssh]$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;LI&gt;Go to your Account Settings&lt;/LI&gt;
&lt;LI&gt;Click &quot;SSH Keys&quot; in the left sidebar&lt;/LI&gt;
&lt;LI&gt;SSH Key buttonClick &quot;Add SSH key&quot;&lt;/LI&gt;
&lt;LI&gt;Paste your key into the &quot;Key&quot; field&lt;/LI&gt;
&lt;LI&gt;Click &quot;Add key&quot;&amp;lt;/LI?
&lt;LI&gt;Confirm the action by entering your GitHub password&lt;/LI&gt;
我的操作：
&lt;br/&gt;
&lt;img src=&quot;/mjj/assets/images/git/github_ssh_setting.png&quot;&gt;&lt;/p&gt;

&lt;H1&gt;Step 4: Test everything out&lt;/H1&gt;


&lt;p&gt;To make sure everything is working you&#39;ll now SSH to GitHub. When you do this, you will be asked to authenticate this action using your password, which for this purpose is the passphrase you created earlier. Don&#39;t change the git@github.com part. That&#39;s supposed to be there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ssh -T git@github.com
# Attempts to ssh to github
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#39;s possible that you&#39;ll see this error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Agent admitted failure to sign using the key.
debug1: No more authentication methods to try.
Permission denied (publickey).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a known problem with certain Linux distributions. For a resolution, see &lt;a href=&quot;https://help.github.com/articles/error-agent-admitted-failure-to-sign&quot;&gt;our help article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may see this warning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&#39;t worry, this is supposed to happen. Verify that the fingerprint matches the one here and type &quot;yes&quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that username is correct, you&#39;ve successfully set up your SSH key. Don&#39;t worry about the shell access thing, you don&#39;t want that anyway.
&lt;BR/&gt;
If you see &quot;access denied&quot; please consider using &lt;a href=&quot;https://help.github.com/articles/error-permission-denied-publickey&quot;&gt;HTTPS&lt;/a&gt; instead of SSH. If you need SSH start at &lt;a href=&quot;https://help.github.com/articles/error-permission-denied-publickey&quot;&gt;these instructions&lt;/a&gt; for diagnosing the issue.
&lt;br/&gt;
我的操作过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost .ssh]$ ssh -T git@github.com
Warning: Permanently added the RSA host key for IP address &#39;192.30.252.131&#39; to the list of known hosts.
Hi user! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
测试一下是否真的成功了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user@localhost test]$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 1.47 KiB, done.
Total 6 (delta 3), reused 0 (delta 0)
To ssh://git@github.com/username/resposity.git
2a28518..aa2d8e4  gh-pages -&amp;gt; gh-pages
[user@localhost test]$ git remote -v
origin  ssh://git@github.com/maijunjin/resposity.git (fetch)
origin  ssh://git@github.com/username/resposity.git (push)
&lt;/code&gt;&lt;/pre&gt;

   </content>
 </entry>
 
 
</feed>